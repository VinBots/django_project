# Generated by Django 3.2.4 on 2022-04-27 10:54

import corporates.models.external_sources.cdp
import corporates.models.ghg
import corporates.models.netzero
import corporates.models.targets
import corporates.models.verification
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
            },
        ),
        migrations.CreateModel(
            name='Benchmark',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('web_URL', models.URLField(verbose_name='Web Address')),
            ],
            options={
                'verbose_name': 'Benchmark',
                'verbose_name_plural': 'Benchmarks',
            },
        ),
        migrations.CreateModel(
            name='Corporate',
            fields=[
                ('company_id', models.IntegerField(default=0, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
                ('short_name', models.CharField(blank=True, max_length=100, null=True)),
                ('web_URL', models.URLField(blank=True, null=True, verbose_name='Web Address')),
                ('cdp_account', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Corporate',
                'verbose_name_plural': 'Corporates',
                'db_table': 'Corporate',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='Industry_1',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Industry_1',
                'verbose_name_plural': 'Industries_1',
            },
        ),
        migrations.CreateModel(
            name='Industry_2',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Industry_2',
                'verbose_name_plural': 'Industries_2',
            },
        ),
        migrations.CreateModel(
            name='IntensityMetrics',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('max_score', models.FloatField(blank=True, null=True)),
                ('rating_description', models.CharField(blank=True, max_length=250, null=True)),
                ('meta_1_desc', models.CharField(blank=True, max_length=250, null=True)),
                ('meta_2_desc', models.CharField(blank=True, max_length=250, null=True)),
                ('meta_3_desc', models.CharField(blank=True, max_length=250, null=True)),
                ('meta_4_desc', models.CharField(blank=True, max_length=250, null=True)),
                ('meta_5_desc', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Sector',
                'verbose_name_plural': 'Sectors',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(max_length=25, unique=True)),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('website_link', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('update_date', models.DateField(auto_now=True)),
                ('scope12_reporting_2_years', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('', 'NA')], default='yes', max_length=50, null=True, verbose_name='At least the last 2 years of Scope 1-2 emissions are provided')),
                ('scope12_reporting_completeness', models.CharField(choices=[('full', 'Full coverage'), ('partly', 'Partly Covered'), ('no', 'Not Covered')], default='full', max_length=50, null=True, verbose_name='Scope 1-2 reported company-wide')),
                ('scope12_verification_completeness', models.CharField(choices=[('full', 'Full coverage'), ('partly', 'Partly Covered'), ('no', 'Not Covered')], default='full', max_length=50, verbose_name='How much of scope 1-2 emissions are verified by a 3rd-party?')),
                ('scope12_assurance_type', models.CharField(choices=[('limited', 'Limited'), ('reasonable', 'Reasonable'), ('reasonable-limited', 'Mix of Reasonable and Limited'), ('no', 'No Assurance')], default='limited', max_length=50, verbose_name='What is the level of assurance (provided by a 3rd-party) for scope 1-2 emissions?')),
                ('scope3_reporting_completeness', models.CharField(choices=[('full', 'Full coverage'), ('partly', 'Partly Covered'), ('no', 'Not Covered')], default='partly', max_length=20, null=True, verbose_name='How much of scope 3 emissions are reported?')),
                ('scope3_verification_completeness', models.CharField(choices=[('full', 'Full coverage'), ('partly', 'Partly Covered'), ('no', 'Not Covered')], default='no', max_length=50, verbose_name='How much of scope 3 emissions are verified by a 3rd-party?')),
                ('scope3_assurance_type', models.CharField(choices=[('limited', 'Limited'), ('reasonable', 'Reasonable'), ('reasonable-limited', 'Mix of Reasonable and Limited'), ('no', 'No Assurance')], default='no', max_length=50, verbose_name='What is the level of assurance (provided by a 3rd-party) for scope 3 emissions?')),
                ('reporting_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2020, max_length=10, null=True, verbose_name='Please select the current reporting year')),
                ('upload_1', models.FileField(blank=True, null=True, upload_to=corporates.models.verification.user_directory_path)),
                ('upload_2', models.FileField(blank=True, null=True, upload_to=corporates.models.verification.user_directory_path)),
                ('upload_3', models.FileField(blank=True, null=True, upload_to=corporates.models.verification.user_directory_path)),
                ('upload_4', models.FileField(blank=True, null=True, upload_to=corporates.models.verification.user_directory_path)),
                ('upload_5', models.FileField(blank=True, null=True, upload_to=corporates.models.verification.user_directory_path)),
                ('company', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='verif_sub', to=settings.AUTH_USER_MODEL)),
                ('verifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='verif_verif', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Verifications',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('allowed_corporates_all', models.BooleanField(blank=True, null=True)),
                ('allowed_corporates', models.ManyToManyField(blank=True, related_name='all_users_by_corp', to='corporates.Corporate')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tradingview',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ticker', models.CharField(max_length=100, unique=True)),
                ('symbol', models.CharField(blank=True, max_length=100, null=True)),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'Tradingview matching',
                'verbose_name_plural': 'Tradingview matchings',
            },
        ),
        migrations.CreateModel(
            name='Ticker',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'Ticker',
                'verbose_name_plural': 'Tickers',
            },
        ),
        migrations.CreateModel(
            name='TargetQuant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('update_date', models.DateField(auto_now=True)),
                ('type', models.CharField(choices=[('gross_abs', 'Gross emissions - absolute target vs. base year'), ('fixed_level', 'Gross emissions - absolute target without base year'), ('net_abs', 'Net emissions - absolute target'), ('gross_int', 'Gross emissions - intensity target'), ('net_zero', 'Net Zero')], default='gross_abs', max_length=20, null=True, verbose_name='What is the type of target?')),
                ('source', models.CharField(choices=[('public', 'Public source'), ('cdp', 'CDP Climate Change Questionnaire'), ('sbti', 'Science-Based Target Institute (SBTi)')], default='public', max_length=20)),
                ('scope_coverage', models.CharField(choices=[('s1', 'Scope 1 only'), ('s2', 'Scope 2 only'), ('s3', 'Scope 3 only'), ('s1s2loc', 'Scopes 1 and 2 (location-based)'), ('s1s2mkt', 'Scopes 1 and 2 (market-based)'), ('s1s2s3loc', 'Scopes 1, 2 (location-based) and 3'), ('s1s2s3mkt', 'Scopes 1, 2 (market-based) and 3')], default='s1s2loc', max_length=10, null=True, verbose_name='Scope Coverage')),
                ('scope_3_coverage', models.CharField(choices=[('full', 'Full coverage'), ('partly', 'Partly Covered'), ('no', 'Not Covered')], default='no', max_length=10, null=True, verbose_name='Does the net zero target fully include all the scope 3 emissions (15 categories)?')),
                ('start_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2020, max_length=10, null=True, verbose_name='Start Year')),
                ('reduction_obj', models.FloatField(blank=True, help_text='A positive number is a decrease of emissions, i.e. for a 20% reduction, input 20. A negative number is an increase of emissions', null=True, verbose_name='Reduction objectives (in %)')),
                ('base_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2020, max_length=10, null=True, verbose_name='Base Year')),
                ('baseline', models.PositiveIntegerField(blank=True, help_text='Emissions (in Mt CO2e) in base year', null=True, verbose_name='Baseline Emissions')),
                ('auto_baseline', models.FloatField(blank=True, help_text='Emissions (in Mt CO2e) in base year', null=True, verbose_name='Automatically-calculated baseline emissions')),
                ('target_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2020, max_length=10, null=True, verbose_name='Target Year')),
                ('upload_1', models.FileField(blank=True, null=True, upload_to=corporates.models.targets.user_directory_path)),
                ('upload_2', models.FileField(blank=True, null=True, upload_to=corporates.models.targets.user_directory_path)),
                ('upload_3', models.FileField(blank=True, null=True, upload_to=corporates.models.targets.user_directory_path)),
                ('upload_4', models.FileField(blank=True, null=True, upload_to=corporates.models.targets.user_directory_path)),
                ('upload_5', models.FileField(blank=True, null=True, upload_to=corporates.models.targets.user_directory_path)),
                ('company', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='target_sub', to=settings.AUTH_USER_MODEL)),
                ('verifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='target_verif', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Target Quantitative Data',
                'verbose_name_plural': 'Target Quantitative Data',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'Site',
                'verbose_name_plural': 'Sites',
            },
        ),
        migrations.CreateModel(
            name='SBTI',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, null=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(blank=True, choices=[('Committed', 'Committed'), ('Targets Set', 'Targets Set'), ('No', 'No')], max_length=100, null=True)),
                ('classification', models.CharField(blank=True, choices=[('1.5°C', '1.5°C'), ('Well-below 2°C', 'Well-below 2°C'), ('2°C', '2°C'), ('NA', 'NA')], max_length=100, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'SBTi data',
                'verbose_name_plural': 'SBTi data',
            },
        ),
        migrations.CreateModel(
            name='NetZero',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('update_date', models.DateField(auto_now=True)),
                ('stated', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('', 'NA')], default='no', max_length=25, null=True, verbose_name='Did the company publicly commit to a net zero target by 2050?')),
                ('coverage', models.CharField(choices=[('s1', 'Scope 1 only'), ('s2', 'Scope 2 only'), ('s3', 'Scope 3 only'), ('s1s2loc', 'Scopes 1 and 2 (location-based)'), ('s1s2mkt', 'Scopes 1 and 2 (market-based)'), ('s1s2s3loc', 'Scopes 1, 2 (location-based) and 3'), ('s1s2s3mkt', 'Scopes 1, 2 (market-based) and 3')], default='s1s2loc', max_length=50, verbose_name='What is the scope of this net zero target')),
                ('scope_3_coverage', models.CharField(choices=[('full', 'Full coverage'), ('partly', 'Partly Covered'), ('no', 'Not Covered')], default='no', max_length=50, verbose_name='Does the net zero target fully include all the scope 3 emissions (15 categories)?')),
                ('target_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2020, help_text='Please fill in the target year only in case the company has not reached its net zero target yet', max_length=10, null=True, verbose_name='What is the target year for reaching net zero?')),
                ('already_reached', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('', 'NA')], default='no', max_length=25, null=True, verbose_name='Did the company reach net zero?')),
                ('ongoing', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'NA')], max_length=25, null=True, verbose_name='Did the company commit to remain net zero in the future?')),
                ('ongoing_coverage', models.CharField(choices=[('s1', 'Scope 1 only'), ('s2', 'Scope 2 only'), ('s3', 'Scope 3 only'), ('s1s2loc', 'Scopes 1 and 2 (location-based)'), ('s1s2mkt', 'Scopes 1 and 2 (market-based)'), ('s1s2s3loc', 'Scopes 1, 2 (location-based) and 3'), ('s1s2s3mkt', 'Scopes 1, 2 (market-based) and 3')], default='s1s2loc', max_length=50, verbose_name='What is the scope of this ongoing net zero commitment?')),
                ('ongoing_scope_3_coverage', models.CharField(choices=[('full', 'Full coverage'), ('partly', 'Partly Covered'), ('no', 'Not Covered')], default='no', max_length=50, verbose_name='Does the net zero target fully include all the scope 3 emissions (15 categories)?')),
                ('year_since', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2020, help_text='Please fill in this field in case the company has already reached its net zero target,             For example, Google state that net zero was reached since 2007', max_length=10, null=True, verbose_name='What year did the company reach net zero?')),
                ('upload_1', models.FileField(blank=True, null=True, upload_to=corporates.models.netzero.user_directory_path)),
                ('upload_2', models.FileField(blank=True, null=True, upload_to=corporates.models.netzero.user_directory_path)),
                ('upload_3', models.FileField(blank=True, null=True, upload_to=corporates.models.netzero.user_directory_path)),
                ('upload_4', models.FileField(blank=True, null=True, upload_to=corporates.models.netzero.user_directory_path)),
                ('upload_5', models.FileField(blank=True, null=True, upload_to=corporates.models.netzero.user_directory_path)),
                ('company', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='netzero_sub', to=settings.AUTH_USER_MODEL)),
                ('verifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='netzero_verif', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Net Zero Targets',
            },
        ),
        migrations.CreateModel(
            name='MSCI',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, null=True)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('ITR', models.FloatField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'MSCI data',
                'verbose_name_plural': 'MSCI data',
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('folder_name', models.CharField(blank=True, max_length=100, null=True)),
                ('filename', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('year', models.IntegerField()),
                ('part', models.CharField(blank=True, max_length=100, null=True)),
                ('desc', models.CharField(blank=True, max_length=100, null=True)),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'Library',
                'verbose_name_plural': 'Library records',
            },
        ),
        migrations.CreateModel(
            name='LatestCompanyScore',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('update_date', models.DateField()),
                ('latest_score_value', models.FloatField(blank=True, null=True)),
                ('rating_value', models.CharField(blank=True, max_length=100, null=True)),
                ('meta_value', models.JSONField(default=dict)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporates.score')),
            ],
            options={
                'verbose_name_plural': 'Latest Scores Values',
            },
        ),
        migrations.CreateModel(
            name='ISIN',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'ISIN',
                'verbose_name_plural': 'ISINs',
            },
        ),
        migrations.CreateModel(
            name='Investment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('update_date', models.DateField(auto_now=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('currency', models.CharField(blank=True, choices=[('eur', 'EUROS'), ('usd', 'USD'), ('gbp', 'GBP')], default='usd', max_length=5, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name_plural': 'Investments',
                'ordering': ['update_date'],
            },
        ),
        migrations.CreateModel(
            name='GHGQuant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(blank=True, choices=[('public', 'Public source'), ('cdp', 'CDP Climate Change Questionnaire'), ('final', 'Final')], default='public', max_length=50, null=True)),
                ('category', models.CharField(blank=True, choices=[('actual', 'Actual'), ('target', 'Target'), ('baseline', 'Baseline')], max_length=100, null=True)),
                ('update_date', models.DateField(auto_now=True)),
                ('status', models.CharField(blank=True, max_length=25, null=True)),
                ('reporting_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2021, max_length=10, null=True)),
                ('ghg_scope_1', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_loc_scope_2', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_mkt_scope_2', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_purch_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_capital_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_fuel_energy_loc_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_fuel_energy_mkt_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_upstream_td_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_waste_ops_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_bus_travel_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_commute_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_up_leased_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_downstream_td_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_proc_sold_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_use_sold_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_eol_sold_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_down_leased_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_franchises_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_investments_scope3', models.PositiveIntegerField(blank=True, null=True)),
                ('ghg_other', models.PositiveIntegerField(blank=True, null=True)),
                ('purch_ghg_offsets', models.PositiveIntegerField(blank=True, null=True)),
                ('upload_1', models.FileField(blank=True, null=True, upload_to=corporates.models.ghg.user_directory_path)),
                ('upload_2', models.FileField(blank=True, null=True, upload_to=corporates.models.ghg.user_directory_path)),
                ('upload_3', models.FileField(blank=True, null=True, upload_to=corporates.models.ghg.user_directory_path)),
                ('upload_4', models.FileField(blank=True, null=True, upload_to=corporates.models.ghg.user_directory_path)),
                ('upload_5', models.FileField(blank=True, null=True, upload_to=corporates.models.ghg.user_directory_path)),
                ('company', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ghg_sub', to=settings.AUTH_USER_MODEL)),
                ('verifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ghg_ver', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'GHG Quantitative',
            },
        ),
        migrations.CreateModel(
            name='Finnhub',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('symbol', models.CharField(blank=True, max_length=100, null=True)),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
            ],
            options={
                'verbose_name': 'Finnhub matching',
                'verbose_name_plural': 'Finnhub matchings',
            },
        ),
        migrations.CreateModel(
            name='CorporateGrouping',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('all_activities', models.ManyToManyField(blank=True, related_name='all_activities', to='corporates.Activity')),
                ('all_benchmarks', models.ManyToManyField(blank=True, related_name='all_benchmarks', to='corporates.Benchmark')),
                ('all_industries_1', models.ManyToManyField(blank=True, related_name='all_industries_1', to='corporates.Industry_1')),
                ('all_industries_2', models.ManyToManyField(blank=True, related_name='all_industries_2', to='corporates.Industry_2')),
                ('all_sectors', models.ManyToManyField(blank=True, related_name='all_sectors', to='corporates.Sector')),
                ('company_id', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('primary_activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_activity', to='corporates.activity')),
                ('primary_benchmark', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_benchmark', to='corporates.benchmark')),
                ('primary_industry_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_industry_1', to='corporates.industry_1')),
                ('primary_industry_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_industry_2', to='corporates.industry_2')),
                ('primary_sector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_sector', to='corporates.sector')),
            ],
        ),
        migrations.AddField(
            model_name='corporate',
            name='primary_country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='corporates.country'),
        ),
        migrations.CreateModel(
            name='CompanyScore',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('update_date', models.DateField(auto_now=True)),
                ('score_value', models.FloatField(blank=True, null=True)),
                ('rating_value', models.CharField(blank=True, max_length=100, null=True)),
                ('meta_value', models.JSONField(default=dict)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporates.score')),
            ],
            options={
                'verbose_name_plural': 'Scores Values',
            },
        ),
        migrations.CreateModel(
            name='CDP',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('update_date', models.DateField(auto_now=True)),
                ('questionnaire_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2021, help_text='Note it can be different from the reporting year', max_length=10, null=True, verbose_name='Please select the reference year for the CDP Climate Change Questionnaire')),
                ('reporting_year', models.CharField(blank=True, choices=[('1990', '1990'), ('1991', '1991'), ('1992', '1992'), ('1993', '1993'), ('1994', '1994'), ('1995', '1995'), ('1996', '1996'), ('1997', '1997'), ('1998', '1998'), ('1999', '1999'), ('2000', '2000'), ('2001', '2001'), ('2002', '2002'), ('2003', '2003'), ('2004', '2004'), ('2005', '2005'), ('2006', '2006'), ('2007', '2007'), ('2008', '2008'), ('2009', '2009'), ('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029'), ('2030', '2030'), ('2031', '2031'), ('2032', '2032'), ('2033', '2033'), ('2034', '2034'), ('2035', '2035'), ('2036', '2036'), ('2037', '2037'), ('2038', '2038'), ('2039', '2039'), ('2040', '2040'), ('2041', '2041'), ('2042', '2042'), ('2043', '2043'), ('2044', '2044'), ('2045', '2045'), ('2046', '2046'), ('2047', '2047'), ('2048', '2048'), ('2049', '2049')], default=2020, max_length=10, null=True, verbose_name='Please select the current reporting year')),
                ('made_public', models.BooleanField(blank=True, default=False, null=True, verbose_name='CDP Climate Change Questionnaire made publicly-available')),
                ('score', models.CharField(blank=True, choices=[('a', 'A'), ('a-', 'A-'), ('b', 'B'), ('b-', 'B-'), ('c', 'C'), ('c-', 'C-'), ('d', 'D'), ('d-', 'D-'), ('f', 'F')], default='f', max_length=10, null=True, verbose_name='CDP Score')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('upload_1', models.FileField(blank=True, null=True, upload_to=corporates.models.external_sources.cdp.user_directory_path)),
                ('upload_2', models.FileField(blank=True, null=True, upload_to=corporates.models.external_sources.cdp.user_directory_path)),
                ('upload_3', models.FileField(blank=True, null=True, upload_to=corporates.models.external_sources.cdp.user_directory_path)),
                ('upload_4', models.FileField(blank=True, null=True, upload_to=corporates.models.external_sources.cdp.user_directory_path)),
                ('upload_5', models.FileField(blank=True, null=True, upload_to=corporates.models.external_sources.cdp.user_directory_path)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corporates.corporate')),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cdp_sub', to=settings.AUTH_USER_MODEL)),
                ('verifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cdp_verif', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'CDP',
            },
        ),
    ]
